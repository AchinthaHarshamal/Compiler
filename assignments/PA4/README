README file for Programming Assignment 4 (C++ edition)
======================================================

Your directory should now contain the following files:

 Makefile
 README
 ast-lex.cc		-> [cool root]/src/PA4/ast-lex.cc
 ast-parse.cc		-> [cool root]/src/PA4/ast-parse.cc
 bad.cl
 cgen			-> [cool root]/etc/../lib/.i
 cool-tree.cc		-> [cool root]/src/PA4/cool-tree.cc
 cool-tree.h
 cool-tree.handcode.h
 dumptype.cc		-> [cool root]/src/PA4/dumptype.cc
 good.cl
 handle_flags.cc	-> [cool root]/src/PA4/handle_flags.cc
 mycoolc		-> [cool root]/src/PA4/mycoolc
 mysemant		-> [cool root]/src/PA4/mysemant
 semant-phase.cc	-> [cool root]/src/PA4/semant-phase.cc
 semant.cc
 semant.h
 stringtab.cc		-> [cool root]/src/PA4/stringtab.cc
 symtab_example.cc	-> [cool root]/src/PA4/symtab_example.cc
 tree.cc		-> [cool root]/src/PA4/tree.cc
 utilities.cc		-> [cool root]/src/PA4/utilities.cc
 *.d			  dependency files

The include (.h) files for this assignment can be found in 
[cool root]/include/PA4

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code.  Just edit this file.

	good.cl and bad.cl test a few features of the semantic checker.
	You should add tests to ensure that good.cl exercises as many
	legal semantic combinations as possible and that bad.cl
	exercises as many kinds of semantic errors as possible.

	semant.h contains declarations and definitions for the semantic
	analyzer.  Place class definitions for the structures you will
	use here.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST).
	From this file, cool-tree.h and cool-tree.cc are automatically 
        generated by a utility that compiles the specification into
        C++ functions for producing and consuming the tree nodes.
        This file is provided for your reference.  DO NOT MODIFY.

        tree.{cc|h} contain definitions used by the tree package.  DO
        NOT MODIFY.

        cool-tree.h, and cool-tree.handcode.h specify and give an
        implementation of Cool ASTs (see the README for PA3 and the
        "Cool Tour").  In this assignment, you will need to add
        functions to the AST classes to store, fetch, and compute
        information about the AST.  Note that cool-tree.handcode.h
        differs slightly from the file supplied for PA3.

   	You should NOT remove any definitions that are already present
	in cool-tree.h and cool-tree.handcode.h.  These functions and
	data members are required for the system to function properly.

        You should add any fields and methods to the classes you need to 
	perform semantic analysis.  You	will need to add, for example, 
	methods which traverse the expressions of the tree and implement 
	the type-checking rules.

	cool-tree.cc contains definitions of the provided methods,
	and instantiations of the template for the list handling functions.
	You should not modify this file, but place definitions of all
	methods you add to cool-tree.h or cool-tree.handcode.h in semant.cc.
	DO NOT MODIFY cool-tree.cc

	semant.cc is the file in which you should write your semantic
	analyzer.  The main() procedure calls the method `semant'
	on `ast_root', the root of the abstract syntax tree generated by
	the parser.  There are methods supplied that you should use to report 
	errors. You are relatively free in how you decide to structure the 
	semantic checker, but don't modify the error printing routines.

	ast-lex.cc and ast-parse.cc implement a lexer and a parser for
	reading text representation of ASTs from console in the format
	produced by the parser phase. DO NOT MODIFY.

	semant-phase.cc contains a test driver for semantic analysis.
	The main program reads an AST in text form from standard input,
	parses it, and then produces a type-annotated AST on standard
	output.  The script mycoolc can pass any of the standard flags
	to the semantic analyzer as well; for this assignment, -s
	(semantic analysis debug) may be useful as it sets a global
	variable semant_debug to true (1).  If you want your semantic
	checker to print debug information when the option is set, write
	your debug code in the following format:

	      if (semant_debug)
	      {
		...
	      }

	semant_debug is provided as a convenience. You don't need to use
	the debugging flags if you don't want to. DON'T MODIFY
	semant-phase.cc

	symtab.h contains a symbol table implementation. Read the
	comments in the file, the "Cool Tour", and look at the example
	in symtab_example.cc.  You are not required to use this code,
	but you may find it useful. DO NOT MODIFY.

Instructions
------------

	To compile the example use of the symbol table, type

	% make symtab_example
        % ./symtab_example

	To compile your semantic analyzer program type:

	% make semant

	To test your semantic checker, type:

        % ./mysemant good.cl

	mysemant is a version of mycoolc that omits code generation.
	mysemant parses all the cool files given on the command line and
	builds a single abstract syntax tree containing all class
	definitions appearing in the input files. Your semantic checker
	is then called on this abstract syntax tree.  If there are no
	errors, the program produces a type-annotated abstract syntax
	tree as output.

	To run your checker on the files good.cl and bad.cl type:

	% make dotest

	If you think your semantic checker is correct and behaves like
	the one we wrote, you can try to run mycoolc using your checker,
	your parser and also your lexical analyzer if you choose (see
	below for instructions).  Remember if your lexer, parser or
	checker behaves in an unexpected manner, you may get errors
	anywhere.

	If you change architectures you must issue

	% make clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA4
----------------

Initially, the `classes` parameter is received from the result of the parser. That parameter was used whole over the program to develop the Semantica analyzer.

We have built our semantic analyzer in a few main steps,
	1) First traversing of AST
		- building the class symbol table(class_symtable)
		- checking  whether the class name is not the same as the name of the basic classes 
		- checking whether the class is not already implemented
		- correct classes are added to the class symbol table
		  otherwise, give and error  

	2) First scaning of the AST
		- checking all inheritances are semantically correct
			- checking all parent class are already defined
			- checking whether the Object class not have a parent class
			- checking whether Bool,Str,Self_type are not inherited
		- checking all features(methods & attribute) in the classes
			- Attribute
				- checking whether all types are already defined
				- checking whether the attribute name is not equal to 'self'
				- checking whether the attribute is not already defined
				- if the attribute passes all the above checks, It will be added to the current scope

			- Method
				- checking whether the method is not already defined
				- checking whether the return type is already implmented in the program
				- if the method passes all the above checks, It will be added to the current scope

	3) Checking the Main class and the Main method
			- checking whether the Main class appears in the program
			- if the Main class is present
				- checking whether the main method appears in the Main class
			- if not giveing an error

	4) Second scanning of the AST
			- this step is mainly for checking the expressions and formals in features and assigning types for expressions
			- Attribute
				- checking whether the assigned expression is semantically correct and then assign a type for it(described below)
				- checking whether the type declaration of the attribute is the same as the expression type
			- Method
				- opening a new scope
				- checking whether all formals(arguments) are semantically correct
					- checking whether formals name are not equal to 'self'
					- checking whether the formal name is not already defined in current
					- if formals are semantically correct it is added to the current scope
				- checking whether the return type is 'SELF_TYPE', if so set the return type 
				  as the current class type
				- checking whether the method body(expression) is semantically correct and assign a type for it(described bellow)
				- finally, checking whether the return type is same as the method body type of the method

Checking expression and assigning a type for expression is a main part of the Semantic analyzer, `semant_expr()` function performs it for us, Which will check all the semantics errors in the expression types shown in following and setting the type field of AST. 
	- assignType
	- static_dispatchType
	- disatchType
	- condType
	- loopType
	- caseType
	- blockType
	- letType
	- plusType
	- subType
	- mulType
	- divType
	- negType
	- ltType
	- eqType
	- compType
	- int_constType
	- bool_constType
	- string_constType
	- newType
	- isvoidType
	- no_exprType
	- objectType

All type checks and semantic analysis are performed the same as that given in the COOL  manual. 


Output
- if the program is semantically correct it gives the AST with Types
- if the program has semantic errors all captured error gives as the output 


Test Cases
- Generated analyzer tested with lot of correct and wrong programs and check wether the result are same as the given semantic analyzer. Every test case is passed with a good probability with few errors(bugs).

- Known & recognized bugs in the analyzer
	- line numbers are not correct while for generated error
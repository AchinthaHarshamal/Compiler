README file for Programming Assignment 5  (C++ edition)
=======================================================

Your directory should now contain the following files:

 Makefile
 README
 ast-lex.cc	      -> [cool root]/src/PA5/ast-lex.cc
 ast-parse.cc	      -> [cool root]/src/PA5/ast-parse.cc
 cgen-phase.cc	      -> [cool root]/src/PA5/cgen-phase.cc
 cgen.cc
 cgen.h
 cgen_supp.cc
 cool-tree.cc	      -> [cool root]/src/PA5/cool-tree.cc
 cool-tree.handcode.h
 dumptype.cc	      -> [cool root]/src/PA5/dumptype.cc
 emit.h
 example.cl
 handle_flags.cc      -> [cool root]/src/PA5/handle_flags.cc
 mycoolc	      -> [cool root]/src/PA5/mycoolc*
 stringtab.cc	      -> [cool root]/src/PA5/stringtab.cc
 tree.cc	      -> [cool root]/src/PA5/tree.cc
 utilities.cc	      -> [cool root]/src/PA5/utilities.cc
 *.d

The include (.h) files for this assignment can be found in 
[cool root]/include/PA5

	The Makefile contains targets for compiling and running your
	program, as well as handing it in. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to
	fill the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct,
	and why your test cases are adequate. It is part of the
	assignment to clearly and concisely explain things in text as
	well as to comment your code. Just edit this file.

	In example.cl you should write a correct Cool program which
	tests as many aspects of the code generator as possible. It
	should pass your code generator, and running spim on the
	generated output should run the program correctly.

	cgen.cc is the skeleton file for the code generator. This
	skeleton is much larger than the ones for previous
	assignments.  The skeleton provides three components of the
	code generator:

		- functions to build the inheritance graph; (we supply
		  this in case you didn't get this working for PA4)

		- functions to emit global data and constants;
		 
		- functions to emit spim instructions; (we supply
		  these last two to save you some tedious coding)

	You should work to understand this code, and it will help you
        write the rest of the code generator.

	cgen.h is the header file for the code generator. Feel free to
	add anything you need.

	cgen_supp.cc is general support code for the code generator.
	You can add functions as you see fit, but do not modify the 3
	functions:

		o byte_mode
		o ascii_mode
		o emit_string_constant

	emit.h defines a bunch of macros which should come in handy
	when you actually want to emit code. Feel free to change
	anything here to suit your needs.

        cgen-phase.cc supplies the driver for the compiler. You should
        not modify this code.  The script mycoolc can pass any of the
        standard flags to the code generator; for this assignment, -c
        (code generator debug) may be useful as it sets a global
        variable cgen_debug to true (1).  If you want your code
        generator to print debug information when the option is set,
        write your debug code in the following format:

	      if (cgen_debug)
	      {
		...
	      }

	symtab.h contains a symbol table implementation. You may
        modify this file if you'd like.  To do so, remove the link and
        copy `[course dir]/include/PA5/symtab.h' to your local
        directory.

	cool.h contains definitions that are used by almost all parts
	of the compiler. DO NOT MODIFY.

        tree.h contains the base class `tree_node' of the AST nodes.

        cool-tree.cc, cool-tree.h, and cool-tree.handcode.h contain
        the declarations and definitions of code generation AST nodes.
        You may add fields as you wish, but you shouldn't modify any
        of the methods already there except `code', which you may
        modify or remove as you wish.  Note that cool-tree.handcode.h
        is different from the same file in PA4---this file contains
        function definitions needed for the cgen.cc skeleton.  You may
        modify cool-tree.h or cool-tree.handcode.h, but don't modify
        cool-tree.cc.  Place all method definitions in cgen.cc

	stringtab.h contains functions to manipulate the string table.
	DO NOT MODIFY.

	dumptype.cc contains functions for printing out an abstract
	syntax tree.  DO NOT MODIFY.

        *.d dependency files, generated automatically by the makefile.

Instructions
------------

	To compile your compiler and code generator type:

	% gmake cgen

	To test your compiler, type:

	% ./mycoolc [-o output filename] <file1.cl> <file2.cl> ...

	This command parses all the cool files given on the command
	line, passes them through the semantic checker, and then hands
	the program AST to your code generator.

	To run your compiler on the file example.cl, type:

	% gmake dotest

	To run the produced code:

	% [cool root]/bin/spim -file file1.s
      /* or the output filename you chose */
	
	If you change architectures you must issue

	% gmake clean

	when you switch from one type of machine to the other.  If at
	some point you get weird errors from the linker, you probably
	forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA5
----------------


Initially, our code generator takes the AST as classes list that is advanced by the semantic analyzer.
Then the constructor of the CgenClassTable performs the all of the work of code generator.It performs the task mainly in a few steps,

- Instlling basic clsses
- Create the class map
- Install classes
- Building inheritance tree
- Code generation


##  Code Generation

- This is the main part of what we care about.
- this part was mainly implemented under a few topics
	- Emitting code for global data & tags
	- Generate GC choice constants
	- Emitting code for constant
	- Emitting code to reserve space for and initialize all of the constants.
	- Emitting code for building Class Table
	- Emitting code for building Parent Table
	- Emitting code for Object Table
	- Emitting code for dispatch Table
	- Emitting code for prototypes
	- Emitting code for the text segment
	- Emitting code for initializing
	- Emitting code for methods

- The topic `Emitting code for methods` emits codes for each and every nonbasic method in a class.Under every method there are lots of expressions. Out task is implementing the code generation function for every expression classes & the method class.

	- method_class
	- assign_class
	- static_dispatch_class
	- cond_class
	- loop_class
	- typecase_class
	- block_class
	- let_class
	- plus_class
	- sub__class
	- mul_class
	- divide_class
	- neg_class
	- lt_class
	- eq_class
	- leq_class
	- comp_class
	- int_class
	- string_class
	- bool_class
	- new_class
	- isvoid_class
	- no_expr_class
	- object_class

In our case,we mainly used a few registers

		$zero	// Zero register
		$a0		// Accumulator
		$a1		// For arguments to prim funcs
		$s0		// Ptr to self (callee saves)
		$t1		// Temporary 1
		$t2		// Temporary 2
		$t3		// Temporary 3
		$sp		// Stack pointer
		$fp		// Frame pointer
		$ra		// Return address

(For the convenient Instead of only using $a0(accumulator) & Only one temporary register here we used $a0, $a1,$t1,$t2,$t3)


Here are a few examples of what is implemented in code generation functions.

- cond_class

		```
		cgen(if(pred) then thenExpr else elseExpr fi)=
			cgen(pred)
			mov T1 $a0
			beq T1 0 label_false  # T1==0
			cgen(thenExpr)
			b label_end:

			label_false: 
		    cgen(elseExpr)
			label_end:
		```
	
- loop_class

		```
		label_loop:
		   cgen(pred)
		   mov T1 $a0
		   beq T1 0 label_exit
		   cgen(loopbody)
		   b label_loop

		label_exit:
		   move $a0 0 #return void
		```
  
    
- plus_class
		```
		   cgen(e1 + e2)=
		   
			   cgen(e1) # Int(i1)/Int Object
			   sw $a0 $(sp)
			   addiu $sp $sp -4
			   
			   cgen(e2) #Int(i2) # Int Object
			   jal Object.copy # copy the Int(i2) and pointer place in $a0
			   
			   lw $t1 4($sp)
			   addiu $sp $sp 4  
			   
			   mov $t2 $a0
			   
			   lw t1 12($t1) # load int value in IntObj (e1.Int)
			   lw t2 12($t2) # load int value in IntObj (e2.Int)
			   
			   add $t3 $t1 $t2
			   sw $t3 12($a0) # store the result in the new object
    	```

We tested our code generator with various programs and checked output whether the are as expected. Results were good at a high percentage and didn't identify any bugs. Therefore we can assume our code generator works fine.

### TODO
- Reduceing  registers usage  only to $a0
- Reduce the temporary registers usage only to $t1 